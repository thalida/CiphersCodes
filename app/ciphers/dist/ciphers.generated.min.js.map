{"version":3,"sources":["cipherCollection.service.js","cipherUtils.service.js","_example.service.js","affine.service.js","caesar.service.js"],"names":["app","service","Ciphers","this","ciphers","totalCiphers","length","prototype","add","cipher","details","name","get","_alpha","_alphanumeric","concat","_alphagrid","alphagrid","Array","index","i","j","utils","ALPHA","angular","copy","ALPHAGRID","ALPHANUMERIC","TOTAL_ALPHA","setCase","char","makeUpperCase","toUpperCase","eachCharacter","string","increment","cb","c","charAt","isUpper","match","extendCopy","obj1","obj2","extend","find","item","array","x","y","isLetter","str","makeKeyedAlpha","key","alpha","keyedAlpha","split","$","each","letter","n","jQuery","inArray","toLowerCase","splice","mod","a","b","cipherCollection","Service","label","addons","description","url","run","args","_defaults","isEncoding","output","type","defaultVal","_coprime","shift","opts","parseInt","newLetterPos","letterPos","indexOf","bind","Cipher","direction"],"mappings":"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","file":"ciphers.generated.min.js","sourcesContent":["'use strict';\n\napp.service('cipherCollection', [\n\tfunction(){\n\t\tvar Ciphers = function(){\n\t\t\tthis.ciphers = [];\n\t\t\tthis.totalCiphers = this.ciphers.length;\n\t\t};\n\n\t\tCiphers.prototype.add = function( cipher ){\n\t\t\tthis.ciphers[cipher.details.name] = cipher;\n\t\t\tthis.totalCiphers = this.ciphers.length;\n\t\t};\n\n\t\tCiphers.prototype.get = function(){\n\t\t\treturn this.ciphers;\n\t\t};\n\n\t\treturn new Ciphers();\n\t}\n]);\n","'use strict';\n\napp.service('cipherUtils', [\n\tfunction(){\n\t\tvar _alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\t\tvar _alphanumeric = _alpha.concat(['0','1','2','3','4','5','6','7','8','9']);\n\t\tvar _alphagrid = (function(){\n\t\t\tvar alphagrid = new Array(6);\n\t\t\tvar index = 0;\n\n\t\t\tfor( var i = 1; i <= 6; i += 1 ){\n\t\t\t\talphagrid[i] = new Array(6);\n\t\t\t\tfor( var j = 1; j <= 6; j += 1 ){\n\t\t\t\t\talphagrid[i][j] = _alphanumeric[index];\n\t\t\t\t\tindex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn alphagrid;\n\t\t})();\n\n\t\tvar utils = {};\n\n\t\tutils.ALPHA = function(){\n\t\t\treturn angular.copy( _alpha );\n\t\t};\n\n\t\tutils.ALPHAGRID = function(){\n\t\t\treturn angular.copy(_alphagrid);\n\t\t};\n\n\t\tutils.ALPHANUMERIC = function(){\n\t\t\treturn angular.copy( _alphanumeric );\n\t\t};\n\n\t\tutils.TOTAL_ALPHA = (function(){\n\t\t\treturn _alpha.length;\n\t\t})();\n\n\n\t\tutils.setCase = function(char, makeUpperCase){\n\t\t\treturn (makeUpperCase === true) ? char.toUpperCase() : char;\n\t\t};\n\n\t\tutils.eachCharacter = function( string, increment, cb ){\n\t\t\tif( typeof increment === 'function' ){\n\t\t\t\tcb = increment;\n\t\t\t\tincrement = 1;\n\t\t\t}\n\n\t\t\tfor( var i = 0; i < string.length; i += increment ){\n\t\t\t\tvar c = string.charAt(i);\n\t\t\t\tvar isUpper = (c.match(/^[A-Z]$/)) ? true : false;\n\n\t\t\t\tif( typeof cb === 'function' ){\n\t\t\t\t\tcb(i, c, isUpper);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tutils.extendCopy = function(obj1, obj2){\n\t\t\treturn angular.extend({}, obj1, obj2);\n\t\t};\n\n\t\tutils.find = function( item, array ){\n\t\t\tfor(var i = 0; i < array.length; i += 1){\n\t\t\t\tfor(var j = 0; j < array.length; j += 1){\n\t\t\t\t\tif(item == array[i][j]){\n\t\t\t\t\t\treturn { x: i, y: j };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tutils.isLetter = function( str ){\n\t\t\treturn str.match(/^[A-Za-z]$/);\n\t\t};\n\n\t\tutils.makeKeyedAlpha = function( key ){\n\t\t\tvar alpha = angular.copy( utils.alpha );\n\t\t\tvar keyedAlpha = (key != '' && key != null) ? key.split('') : [];\n\n\t\t\t$.each(keyedAlpha, function(index, letter){\n\t\t\t\tvar n = jQuery.inArray(letter.toLowerCase(),alpha);\n\t\t\t\talpha.splice(n,1);\n\t\t\t});\n\n\t\t\tkeyedAlpha = keyedAlpha.concat(alpha);\n\n\t\t\treturn keyedAlpha;\n\t\t};\n\n\t\tutils.mod = function(a, b){\n\t\t\treturn ((a % b) + b) % b;\n\t\t};\n\n\t\treturn utils;\n\t}\n]);\n","'use strict';\n\n//==============================================================================\n//\n//\tCipher/Code Name\n//\n//------------------------------------------------------------------------------\napp.service('exampleService', [\n\t'cipherCollection',\n\t'cipherUtils',\n\tfunction(cipherCollection, utils){\n\t\tvar Service = function(){\n\t\t\tthis.details = {\n\t\t\t\tname: 'example',\n\t\t\t\tlabel: 'Example Foo Bar',\n\t\t\t\taddons: [],\n\t\t\t\tdescription: 'Lorem ipsum dolor this is an example cipher.',\n\t\t\t\turl: 'example.com/example_foo_bar'\n\t\t\t};\n\n\t\t\tcipherCollection.add( this );\n\t\t};\n\n\t\tService.prototype.run = function( args ){\n\t\t\tvar _defaults = {\n\t\t\t\tisEncoding: true,\n\t\t\t\tstring: '',\n\t\t\t\taddons: {}\n\t\t\t};\n\t\t\tvar opts = utils.extendCopy(_defaults, args);\n\t\t\tvar output = '';\n\n\t\t\treturn output;\n\t\t};\n\n\t\treturn new Service();\n\t}\n]);\n","'use strict';\n\n//==============================================================================\n//\n//\tCipher/Code Name\n//\n//------------------------------------------------------------------------------\napp.service('affineService', [\n\t'cipherCollection',\n\t'cipherUtils',\n\tfunction(cipherCollection, utils){\n\t\tvar Service = function(){\n\t\t\tthis.details = {\n\t\t\t\tname: 'affine',\n\t\t\t\tlabel: 'Affine',\n\t\t\t\tdescription: 'The affine cipher is a type of monoalphabetic substitution cipher, wherein each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. (via Wikipedia)',\n\t\t\t\turl: 'http://en.wikipedia.org/wiki/Affine_cipher',\n\t\t\t\taddons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'shift',\n\t\t\t\t\t\tlabel: 'Shift by',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefaultVal: 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tthis._coprime = 5;\n\n\t\t\tcipherCollection.add( this );\n\t\t};\n\n\t\tService.prototype.run = function( args ){\n\t\t\tvar _defaults = {\n\t\t\t\tisEncoding: true,\n\t\t\t\tstring: '',\n\t\t\t\taddons: {\n\t\t\t\t\tshift: 1\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar opts = utils.extendCopy(_defaults, args);\n\t\t\tvar alpha = utils.ALPHA();\n\t\t\tvar shift = parseInt(opts.addons.shift, 10);\n\t\t\tvar output = '';\n\n\t\t\tutils.eachCharacter(opts.string, function(i, char, isUpper){\n\t\t\t\tif( utils.isLetter(char) ){\n\t\t\t\t\tvar letterPos = alpha.indexOf( char.toLowerCase() );\n\t\t\t\t\tvar newLetterPos;\n\n\t\t\t\t\tif(opts.isEncoding === true){\n\t\t\t\t\t\tnewLetterPos = (this._coprime * letterPos) + shift;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tnewLetterPos = (utils.TOTAL_ALPHA - this._coprime) * (letterPos - shift);\n\t\t\t\t\t}\n\n\t\t\t\t\tnewLetterPos = utils.mod(newLetterPos, utils.TOTAL_ALPHA);\n\t\t\t\t\tchar = alpha[newLetterPos];\n\t\t\t\t}\n\n\t\t\t\toutput += utils.setCase(char, isUpper);\n\t\t\t}.bind(this));\n\n\t\t\treturn output;\n\t\t};\n\n\t\treturn new Service();\n\t}\n]);\n","'use strict';\n\n//==============================================================================\n//\n//\tCaesar Cipher\n//\n//------------------------------------------------------------------------------\napp.service('caesarService', [\n\t'cipherCollection',\n\t'cipherUtils',\n\tfunction(cipherCollection, utils){\n\t\tvar Cipher = function(){\n\t\t\tthis.details = {\n\t\t\t\tname: 'caesar',\n\t\t\t\tlabel: 'Caesar',\n\t\t\t\taddons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'shift',\n\t\t\t\t\t\tlabel: 'Shift by',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefaultVal: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tdescription: 'A simple substitution cipher in which the alphabet is shifted up or down a specified number of positions.',\n\t\t\t\turl: 'http://en.wikipedia.org/wiki/Caesar_cipher'\n\t\t\t};\n\n\t\t\tcipherCollection.add( this );\n\t\t};\n\n\t\tCipher.prototype.run = function( args ){\n\t\t\tvar _defaults = {\n\t\t\t\tisEncoding: true,\n\t\t\t\tstring: '',\n\t\t\t\taddons: {\n\t\t\t\t\tshift: 1\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar opts = utils.extendCopy(_defaults, args);\n\t\t\tvar\talpha = utils.ALPHA();\n\t\t\tvar shift = parseInt(opts.addons.shift, 10);\n\t\t\tvar output = '';\n\n\t\t\tutils.eachCharacter(opts.string, function( i, char, isUpper ){\n\t\t\t\tif( utils.isLetter(char) ){\n\t\t\t\t\tvar letterPos = alpha.indexOf( char.toLowerCase() );\n\t\t\t\t\tvar direction = (opts.isEncoding === true ) ? 1 : -1;\n\t\t\t\t\tvar newLetterPos = letterPos + (direction * shift);\n\n\t\t\t\t\tif(newLetterPos >= utils.TOTAL_ALPHA ){\n\t\t\t\t\t\tnewLetterPos = utils.mod(newLetterPos, utils.TOTAL_ALPHA);\n\t\t\t\t\t} else if(newLetterPos < 0 ){\n\t\t\t\t\t\tnewLetterPos = utils.TOTAL_ALPHA + newLetterPos;\n\t\t\t\t\t}\n\n\t\t\t\t\tchar = alpha[newLetterPos];\n\t\t\t\t}\n\n\t\t\t\toutput += utils.setCase(char, isUpper);\n\t\t\t}.bind(this));\n\n\t\t\treturn output;\n\t\t};\n\n\t\treturn new Cipher();\n\t}\n]);\n"],"sourceRoot":"/source/"}